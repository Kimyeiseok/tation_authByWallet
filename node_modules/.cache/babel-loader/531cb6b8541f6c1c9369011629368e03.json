{"ast":null,"code":"import Portis from '@portis/web3';\nimport Web3 from 'web3'; //import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\n\nimport { TACVotingABI, TACVotingAddress, CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress } from './AddAndABISrc_testnet';\nimport FirebaseService from 'services/FirebaseService';\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\nexport { TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress }; // export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\nexport const CoopDataContract = (walletType, method, props) => {\n  let web3;\n\n  switch (walletType) {\n    case 'Portis':\n      web3 = new Web3(portis.provider);\n      break;\n\n    case 'MetaMask':\n      web3 = new Web3(window.ethereum);\n  }\n\n  const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n  trySwitch(method, props);\n  const test = {};\n\n  test.getUser = async (address) => await coopData_contract.methods.getUser(address).call().then(res => res);\n\n  async function trySwitch(method, props) {\n    switch (method) {\n      case 'proposeMatch':\n        const {\n          winnerAddress,\n          winnerPoints,\n          loserAddress,\n          loserPoints,\n          refereeAddress\n        } = props;\n        console.log('hello proposeMatch');\n        await coopData_contract.methods.proposeMatch(winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress, 'values.notes').send({\n          from: refereeAddress\n        }).on(\"transactionHash\", function (txHash) {\n          console.log(txHash);\n          FirebaseService.refereeTxHash(refereeAddress, txHash);\n        }).on('error', function (error) {\n          console.log(error);\n        });\n        break;\n\n      case 'getUser':\n        const {\n          address\n        } = props;\n        return test.getUser(address);\n        break;\n    }\n  }\n}; // CoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n// \t console.log('hello proposeMatch')\n// \t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n// \t\t\t\t\t\t  .send({ from: refereeAddress })\n// \t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\tconsole.log(txHash)\n// \t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n// \t\t\t\t\t\t  })\n// \t\t\t\t\t\t  .on('error', function(error){\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t  })\n// }\n// CoopDataContract.getUserMatches = async (address) =>\n// \t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n// CoopDataContract.getProposedMatchData = async (proposedMatchId) => \n//          await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n// CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n// CoopDataContract.setUser = async (address) =>\n// \t\t\tawait coopData_contract.methods\n// \t\t\t\t\t  .setUser()\n//        \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n// \t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n// \t\t\t\t\t\t console.log(\"pending\");\n// \t\t\t\t\t\t console.log(hash)\n// \t\t\t\t\t  })\n// \t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n// \t\t\t\t\t\t console.log(\"confirmation\");\n// \t\t\t\t\t\t console.log(receipt)\n// \t\t\t\t\t  });\n// CoopDataContract.getUser = async (address) =>\n// \t\tawait coopData_contract.methods\n// \t\t\t\t.getUser(address)\n// \t\t\t\t.call().then(res => res);\n//export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n\n_c = CoopDataContract;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoopDataContract\");","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/AddAndABI1.js"],"names":["Portis","Web3","TACVotingABI","TACVotingAddress","CoopDataABI","CoopDataAddress","TACLockupABI","TACLockupAddress","TACABI","TACAddress","FirebaseService","portis","CoopDataContract","walletType","method","props","web3","provider","window","ethereum","coopData_contract","eth","Contract","trySwitch","test","getUser","address","methods","call","then","res","winnerAddress","winnerPoints","loserAddress","loserPoints","refereeAddress","console","log","proposeMatch","send","from","on","txHash","refereeTxHash","error"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;AACA;;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAwCC,WAAxC,EAAqDC,eAArD,EAAsEC,YAAtE,EAAoFC,gBAApF,EAAsGC,MAAtG,EAA8GC,UAA9G,QAA+H,wBAA/H;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,MAAMC,MAAM,GAAG,IAAIX,MAAJ,CAAW,sCAAX,EAAmD,SAAnD,CAAf;AAGA,SAAQS,UAAR,EAAoBJ,eAApB,EAAqCE,gBAArC,EAAuDJ,gBAAvD,G,CAEA;AACA;AACA;AACA;;AAIA,OAAO,MAAMS,gBAAgB,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,KAArB,KAA+B;AAI9D,MAAIC,IAAJ;;AACA,UAAQH,UAAR;AACC,SAAK,QAAL;AAAgBG,MAAAA,IAAI,GAAG,IAAIf,IAAJ,CAASU,MAAM,CAACM,QAAhB,CAAP;AACf;;AACD,SAAK,UAAL;AAAiBD,MAAAA,IAAI,GAAG,IAAIf,IAAJ,CAASiB,MAAM,CAACC,QAAhB,CAAP;AAHlB;;AAKA,QAAMC,iBAAiB,GAAG,IAAIJ,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsBlB,WAAtB,EAAmCC,eAAnC,CAA1B;AACAkB,EAAAA,SAAS,CAACT,MAAD,EAASC,KAAT,CAAT;AAEE,QAAMS,IAAI,GAAC,EAAX;;AAEHA,EAAAA,IAAI,CAACC,OAAL,GAAe,OAAOC,OAAP,KACb,MAAMN,iBAAiB,CAACO,OAAlB,CACHF,OADG,CACKC,OADL,EAEHE,IAFG,GAEIC,IAFJ,CAESC,GAAG,IAAIA,GAFhB,CADR;;AAMC,iBAAeP,SAAf,CAAyBT,MAAzB,EAAiCC,KAAjC,EAAwC;AACrC,YAAOD,MAAP;AACF,WAAK,cAAL;AACE,cAAM;AAACiB,UAAAA,aAAD;AAAgBC,UAAAA,YAAhB;AAA8BC,UAAAA,YAA9B;AAA4CC,UAAAA,WAA5C;AAAyDC,UAAAA;AAAzD,YAA2EpB,KAAjF;AACAqB,QAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,cAAMjB,iBAAiB,CAACO,OAAlB,CAA0BW,YAA1B,CAAuCP,aAAvC,EAAqDC,YAArD,EAAkEC,YAAlE,EAA+EC,WAA/E,EAA2FC,cAA3F,EAA0G,cAA1G,EACCI,IADD,CACM;AAAEC,UAAAA,IAAI,EAAEL;AAAR,SADN,EAECM,EAFD,CAEI,iBAFJ,EAEuB,UAASC,MAAT,EAAiB;AACzCN,UAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;AACAhC,UAAAA,eAAe,CAACiC,aAAhB,CAA8BR,cAA9B,EAA8CO,MAA9C;AACE,SALD,EAMCD,EAND,CAMI,OANJ,EAMa,UAASG,KAAT,EAAe;AAC7BR,UAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACE,SARD,CAAN;AAUD;;AACD,WAAK,SAAL;AAAiB,cAAM;AAAClB,UAAAA;AAAD,YAAYX,KAAlB;AACf,eAAOS,IAAI,CAACC,OAAL,CAAaC,OAAb,CAAP;AACD;AAjBC;AAmBC;AAGJ,CA5CM,C,CAkDP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;;KAtGad,gB","sourcesContent":["import Portis from '@portis/web3';\nimport Web3 from 'web3'\n//import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\nimport { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc_testnet'; \nimport FirebaseService from 'services/FirebaseService'\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\n\n\nexport {TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress}\n\n// export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\n\n\nexport const CoopDataContract = (walletType, method, props) => {\n\t\n\n\t\n\tlet web3\n\tswitch (walletType){\n\t\tcase 'Portis' : web3 = new Web3(portis.provider);\n\t\t\tbreak;\n\t\tcase 'MetaMask': web3 = new Web3(window.ethereum);\t\n\t}\n\tconst coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n\ttrySwitch(method, props)\n\t\n\t\t\tconst test={}\n\t\ntest.getUser = async (address) =>\n\t\tawait coopData_contract.methods\n\t\t\t\t.getUser(address)\n\t\t\t\t.call().then(res => res);\n\t\n\t\n\tasync function trySwitch(method, props) {\n  \t\tswitch(method){\n\t\tcase 'proposeMatch' :  \t\n\t\t\t\tconst {winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress} = props\n\t\t\t\tconsole.log('hello proposeMatch')\n\t\t\t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n\t\t\t\t\t\t\t\t  .send({ from: refereeAddress })\n\t\t\t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n\t\t\t\t\t\t\t\t\tconsole.log(txHash)\n\t\t\t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t  .on('error', function(error){\n\t\t\t\t\t\t\t\t\tconsole.log(error)\n\t\t\t\t\t\t\t\t  })\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\tbreak;\n\t\tcase 'getUser' : const {address} = props\n\t\t\t\treturn test.getUser(address);\n\t\t\tbreak;\t\t\n\t}\t\n    }\n\t\n\t\n}\n\n\t\n\n\n\n// CoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n// \t console.log('hello proposeMatch')\n// \t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n// \t\t\t\t\t\t  .send({ from: refereeAddress })\n// \t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\tconsole.log(txHash)\n// \t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n// \t\t\t\t\t\t  })\n// \t\t\t\t\t\t  .on('error', function(error){\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t  })\n\t\n// }\n\n// CoopDataContract.getUserMatches = async (address) =>\n// \t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n\n// CoopDataContract.getProposedMatchData = async (proposedMatchId) => \n//          await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n\n// CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n\n// CoopDataContract.setUser = async (address) =>\n// \t\t\tawait coopData_contract.methods\n// \t\t\t\t\t  .setUser()\n//        \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n// \t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n// \t\t\t\t\t\t console.log(\"pending\");\n// \t\t\t\t\t\t console.log(hash)\n// \t\t\t\t\t  })\n// \t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n// \t\t\t\t\t\t console.log(\"confirmation\");\n// \t\t\t\t\t\t console.log(receipt)\n// \t\t\t\t\t  });\n\n// CoopDataContract.getUser = async (address) =>\n// \t\tawait coopData_contract.methods\n// \t\t\t\t.getUser(address)\n// \t\t\t\t.call().then(res => res);\n\t\n\n\n\n//export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n"]},"metadata":{},"sourceType":"module"}