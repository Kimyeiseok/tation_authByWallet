{"ast":null,"code":"import { all, takeEvery, put, fork, call } from 'redux-saga/effects';\nimport { GET_TAC_WETH_PAIR, UPDATE_TAC_WETH_PAIR } from '../constants/Uniswap';\nimport { getTacWethPair, updateTacWethPair } from \"../actions/Uniswap\";\nimport UniswapService from 'services/UniswapService';\nexport function* getTacWethPairSaga() {\n  yield takeEvery(GET_TAC_WETH_PAIR, function* ({\n    payload\n  }) {\n    try {\n      const TACWETHPair = yield call(UniswapService.TACWETHPair);\n      const USDCWETHPair = yield call(UniswapService.USDCWETHPair);\n      const USDCTACpair = USDCWETHPair / TACWETHPair;\n      yield put(updateTacWethPair({\n        USDCTACpair,\n        USDCWETHPair,\n        TACWETHPair\n      }));\n    } catch (err) {}\n  });\n}\nexport default function* rootSaga() {\n  yield all([fork(getTacWethPairSaga)]);\n}","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/redux/sagas/Uniswap.js"],"names":["all","takeEvery","put","fork","call","GET_TAC_WETH_PAIR","UPDATE_TAC_WETH_PAIR","getTacWethPair","updateTacWethPair","UniswapService","getTacWethPairSaga","payload","TACWETHPair","USDCWETHPair","USDCTACpair","err","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,QAAgD,oBAAhD;AACA,SACCC,iBADD,EAECC,oBAFD,QAGO,sBAHP;AAIA,SACCC,cADD,EAECC,iBAFD,QAGO,oBAHP;AAKA,OAAOC,cAAP,MAA2B,yBAA3B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,SAAS,CAACI,iBAAD,EAAoB,WAAW;AAACM,IAAAA;AAAD,GAAX,EAAsB;AACzD,QAAI;AACH,YAAMC,WAAW,GAAE,MAAMR,IAAI,CAACK,cAAc,CAACG,WAAhB,CAA7B;AACA,YAAMC,YAAY,GAAE,MAAMT,IAAI,CAACK,cAAc,CAACI,YAAhB,CAA9B;AACA,YAAMC,WAAW,GAAGD,YAAY,GAACD,WAAjC;AACA,YAAMV,GAAG,CAACM,iBAAiB,CAAC;AAACM,QAAAA,WAAD;AAAcD,QAAAA,YAAd;AAA4BD,QAAAA;AAA5B,OAAD,CAAlB,CAAT;AAEA,KAND,CAME,OAAOG,GAAP,EAAY,CAEb;AACD,GAVe,CAAf;AAWD;AAID,eAAe,UAAUC,QAAV,GAAqB;AAClC,QAAMhB,GAAG,CAAC,CACVG,IAAI,CAACO,kBAAD,CADM,CAAD,CAAT;AAID","sourcesContent":["import { all, takeEvery, put, fork, call } from 'redux-saga/effects';\nimport {\n\tGET_TAC_WETH_PAIR,\n\tUPDATE_TAC_WETH_PAIR,\n} from '../constants/Uniswap';\nimport {\n\tgetTacWethPair,\n\tupdateTacWethPair,\n} from \"../actions/Uniswap\";\n\nimport UniswapService from 'services/UniswapService'\n\nexport function* getTacWethPairSaga() {\n  yield takeEvery(GET_TAC_WETH_PAIR, function* ({payload}) {\n\t\ttry {\n\t\t\tconst TACWETHPair= yield call(UniswapService.TACWETHPair)\n\t\t\tconst USDCWETHPair= yield call(UniswapService.USDCWETHPair)\n\t\t\tconst USDCTACpair = USDCWETHPair/TACWETHPair\n\t\t\tyield put(updateTacWethPair({USDCTACpair, USDCWETHPair, TACWETHPair}));\n\n\t\t} catch (err) {\n\n\t\t}\n\t});\n}\n\n\n\nexport default function* rootSaga() {\n  yield all([\n\t\tfork(getTacWethPairSaga),\n\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}