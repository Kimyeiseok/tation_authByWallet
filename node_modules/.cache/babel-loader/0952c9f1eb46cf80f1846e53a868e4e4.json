{"ast":null,"code":"import detectEthereumProvider from '@metamask/detect-provider';\nimport { notification } from \"antd\";\nexport const metamaskInit = async () => {\n  const provider = await detectEthereumProvider();\n\n  const handleAccountsChanged = accounts => {\n    if (accounts.length === 0) {\n      // MetaMask is locked or the user has not connected any accounts\n      console.log('Please connect to MetaMask.');\n      window.ethereum.enable();\n    } else if (accounts[0] !== currentAccount) {\n      currentAccount = accounts[0]; // Do any other work!\n    }\n  };\n\n  const getAccount = () => {\n    let currentAccount = null;\n    ethereum.request({\n      method: 'eth_accounts'\n    }).then(handleAccountsChanged).catch(err => {\n      notification.warning({\n        message: 'Notification',\n        description: err,\n        placement: 'topRight'\n      });\n    });\n  };\n\n  if (provider) {\n    const chainId = await provider.request({\n      method: 'eth_chainId'\n    });\n    chainId == '0x1' ? getAccount() : notification.warning({\n      message: 'Notification',\n      description: '이더리움 네트워크를 메인넷으로 설정해주세요',\n      placement: 'topRight'\n    });\n  } else {\n    // if the provider is not detected, detectEthereumProvider resolves to null\n    console.error('Please install MetaMask!', error);\n    notification.warning({\n      message: 'Notification',\n      description: 'Please install MetaMask!',\n      placement: 'topRight'\n    });\n  }\n};","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/MetamaskService.js"],"names":["detectEthereumProvider","notification","metamaskInit","provider","handleAccountsChanged","accounts","length","console","log","window","ethereum","enable","currentAccount","getAccount","request","method","then","catch","err","warning","message","description","placement","chainId","error"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,2BAAnC;AACA,SAAUC,YAAV,QAA+B,MAA/B;AAEA,OAAO,MAAMC,YAAY,GAAG,YAAY;AACrC,QAAMC,QAAQ,GAAG,MAAMH,sBAAsB,EAA7C;;AACA,QAAMI,qBAAqB,GAAIC,QAAD,IAAa;AAC1C,QAAIA,QAAQ,CAACC,MAAT,KAAoB,CAAxB,EAA2B;AAC3B;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ;AACCC,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACC,KAJF,MAIQ,IAAIN,QAAQ,CAAC,CAAD,CAAR,KAAgBO,cAApB,EAAoC;AAC5CA,MAAAA,cAAc,GAAGP,QAAQ,CAAC,CAAD,CAAzB,CAD4C,CAE5C;AACE;AACF,GATD;;AAUA,QAAMQ,UAAU,GAAG,MAAM;AACxB,QAAID,cAAc,GAAG,IAArB;AACDF,IAAAA,QAAQ,CACLI,OADH,CACW;AAAEC,MAAAA,MAAM,EAAE;AAAV,KADX,EAEGC,IAFH,CAEQZ,qBAFR,EAGGa,KAHH,CAGUC,GAAD,IAAS;AACjBjB,MAAAA,YAAY,CAACkB,OAAb,CAAqB;AAClBC,QAAAA,OAAO,EAAE,cADS;AAElBC,QAAAA,WAAW,EAAEH,GAFK;AAGlBI,QAAAA,SAAS,EAAE;AAHO,OAArB;AAKE,KATH;AAUK,GAZL;;AAcG,MAAInB,QAAJ,EAAc;AAChB,UAAMoB,OAAO,GAAG,MAAMpB,QAAQ,CAACW,OAAT,CAAiB;AAACC,MAAAA,MAAM,EAAE;AAAT,KAAjB,CAAtB;AACDQ,IAAAA,OAAO,IAAI,KAAX,GACGV,UAAU,EADb,GAEGZ,YAAY,CAACkB,OAAb,CAAqB;AACtBC,MAAAA,OAAO,EAAE,cADa;AAEtBC,MAAAA,WAAW,EAAE,yBAFS;AAGtBC,MAAAA,SAAS,EAAE;AAHW,KAArB,CAFH;AAOA,GATG,MASG;AACL;AACAf,IAAAA,OAAO,CAACiB,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACAvB,IAAAA,YAAY,CAACkB,OAAb,CAAqB;AACrBC,MAAAA,OAAO,EAAE,cADY;AAErBC,MAAAA,WAAW,EAAE,0BAFQ;AAGrBC,MAAAA,SAAS,EAAE;AAHU,KAArB;AAKD;AACE,CA5CE","sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport {  notification  } from \"antd\";\n\nexport const metamaskInit = async () => {\n\t  const provider = await detectEthereumProvider()\n\t  const handleAccountsChanged = (accounts)=> {\n\t\t\t if (accounts.length === 0) {\n\t\t\t\t// MetaMask is locked or the user has not connected any accounts\n\t\t\t\tconsole.log('Please connect to MetaMask.');\n\t\t\t\t window.ethereum.enable();\n\t\t\t  } else if (accounts[0] !== currentAccount) {\n\t\t\t\tcurrentAccount = accounts[0];\n\t\t\t\t// Do any other work!\n\t\t\t  }\n\t\t\t}\n\t  const getAccount = () => {\n\t\t  let currentAccount = null;\n\t\t\tethereum\n\t\t\t  .request({ method: 'eth_accounts' })\n\t\t\t  .then(handleAccountsChanged)\n\t\t\t  .catch((err) => {\n\t\t\t\tnotification.warning({\n\t\t\t\t\t\t\tmessage: 'Notification',\n\t\t\t\t\t\t\tdescription: err,\n\t\t\t\t\t\t\tplacement: 'topRight',\n\t\t\t\t\t\t  }); \n\t\t\t  });  \n\t      }\n\t  \n      if (provider) {\n \t\t\tconst chainId = await provider.request({method: 'eth_chainId' })\n\t\t\tchainId == '0x1'\n\t\t\t\t? getAccount() \n\t\t\t\t: notification.warning({\n\t\t\t\t\tmessage: 'Notification',\n\t\t\t\t\tdescription: '이더리움 네트워크를 메인넷으로 설정해주세요',\n\t\t\t\t\tplacement: 'topRight',\n\t\t\t\t  });   \n\t\t} else {\n\t\t  // if the provider is not detected, detectEthereumProvider resolves to null\n\t\t  console.error('Please install MetaMask!', error)\n\t\t\t\tnotification.warning({\n\t\t\t\tmessage: 'Notification',\n\t\t\t\tdescription: 'Please install MetaMask!',\n\t\t\t\tplacement: 'topRight',\n\t\t\t  });\n\t\t}\n\t\t  }"]},"metadata":{},"sourceType":"module"}