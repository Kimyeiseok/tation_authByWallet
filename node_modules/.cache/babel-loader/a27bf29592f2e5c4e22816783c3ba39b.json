{"ast":null,"code":"import { WALLET_TYPE } from 'redux/constants/Auth';\nimport Portis from '@portis/web3';\nimport Web3 from 'web3'; //import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\n\nimport { TACVotingABI, TACVotingAddress, CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress } from './AddAndABISrc_testnet';\nimport FirebaseService from 'services/FirebaseService';\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\nconst walletType = localStorage.getItem(WALLET_TYPE);\nlet web3;\n\nif (walletType == 'Portis') {\n  web3 = new Web3(portis.provider);\n} else if (walletType == 'MetaMask') {\n  web3 = new Web3(window.ethereum);\n}\n\nexport { TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress };\nexport const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\nexport const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\nexport const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\nexport const tac_contract = new web3.eth.Contract(TACABI, TACAddress); // export const getReceipt = new web3.eth.getTransactionReceipt(\n//   \"0xbb93d82a1766bc44574409a35be5a218f77df507c1dd82a9c9fd3cdf041e47ad\", (txR) => {\n//   console.log(txR);}\n// )\n\nexport const CoopDataContract = {};\n\nCoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n  console.log('hello proposeMatch');\n  await coopData_contract.methods.proposeMatch(winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress, 'values.notes').send({\n    from: refereeAddress\n  }).on(\"transactionHash\", function (txHash) {\n    console.log(txHash);\n    FirebaseService.refereeTxHash(refereeAddress, txHash);\n  }).on('error', function (error) {\n    console.log(error);\n  });\n};\n\nCoopDataContract.getUserMatches = async (address) => await coopData_contract.methods.getUserMatches(address).call().then(res => res);\n\nCoopDataContract.getProposedMatchData = async (proposedMatchId) => await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res); // CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n\n\nCoopDataContract.setUser = async (address) => await coopData_contract.methods.setUser().send({\n  from: address,\n  gas: '0x1CD4C'\n}).on(\"transactionHash\", function (hash) {\n  console.log(\"pending\");\n  console.log(hash);\n}).on(\"confirmation\", function (receipt) {\n  console.log(\"confirmation\");\n  console.log(receipt);\n}).on('error', function (error) {\n  console.log(error);\n});\n\nCoopDataContract.getUser = async (address) => await coopData_contract.methods.getUser(address).call().then(res => res);\n\nexport const tac_contract_approve = async address => await tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res);","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/AddAndABI.js"],"names":["WALLET_TYPE","Portis","Web3","TACVotingABI","TACVotingAddress","CoopDataABI","CoopDataAddress","TACLockupABI","TACLockupAddress","TACABI","TACAddress","FirebaseService","portis","walletType","localStorage","getItem","web3","provider","window","ethereum","tacVoting_contract","eth","Contract","coopData_contract","tacLockup_contract","tac_contract","CoopDataContract","proposeMatch","winnerAddress","winnerPoints","loserAddress","loserPoints","refereeAddress","console","log","methods","send","from","on","txHash","refereeTxHash","error","getUserMatches","address","call","then","res","getProposedMatchData","proposedMatchId","getProposedMatch","setUser","gas","hash","receipt","getUser","tac_contract_approve","allowance"],"mappings":"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","sourcesContent":["import {WALLET_TYPE} from 'redux/constants/Auth';\nimport Portis from '@portis/web3';\nimport Web3 from 'web3'\n//import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\nimport { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc_testnet'; \nimport FirebaseService from 'services/FirebaseService'\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\n\nconst walletType = localStorage.getItem(WALLET_TYPE);\n\nlet web3\nif(walletType == 'Portis'){\n\t web3 = new Web3(portis.provider);\n}else if(walletType == 'MetaMask'){\n\t web3 = new Web3(window.ethereum);\n}\n\n\nexport {TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress}\n\nexport const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\nexport const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\nexport const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\nexport const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n// export const getReceipt = new web3.eth.getTransactionReceipt(\n//   \"0xbb93d82a1766bc44574409a35be5a218f77df507c1dd82a9c9fd3cdf041e47ad\", (txR) => {\n//   console.log(txR);}\n// )\n\n\nexport const CoopDataContract = {}\n\nCoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n\t console.log('hello proposeMatch')\n\t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n\t\t\t\t\t\t  .send({ from: refereeAddress })\n\t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n\t\t\t\t\t\t\tconsole.log(txHash)\n\t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t  .on('error', function(error){\n\t\t\t\t\t\t\tconsole.log(error)\n\t\t\t\t\t\t  })\n\t\n}\n\nCoopDataContract.getUserMatches = async (address) =>\n\t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n\nCoopDataContract.getProposedMatchData = async (proposedMatchId) => \n         await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n\n// CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n\nCoopDataContract.setUser = async (address) =>\n\t\t\tawait coopData_contract.methods\n\t\t\t\t\t  .setUser()\n       \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n\t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n\t\t\t\t\t\t console.log(\"pending\");\n\t\t\t\t\t\t console.log(hash)\n\t\t\t\t\t  })\n\t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n\t\t\t\t\t\t console.log(\"confirmation\");\n\t\t\t\t\t\t console.log(receipt)\n\t\t\t\t\t  })\n\t\t\t\t\t  .on('error', function(error){\n\t\t\t\t\t\tconsole.log(error)\n\t\t\t\t\t  })\n\n\n\nCoopDataContract.getUser = async (address) =>\n\t\tawait coopData_contract.methods\n\t\t\t\t.getUser(address)\n\t\t\t\t\t.call().then(res => res);\n\t\n\n\n\nexport const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n"]},"metadata":{},"sourceType":"module"}