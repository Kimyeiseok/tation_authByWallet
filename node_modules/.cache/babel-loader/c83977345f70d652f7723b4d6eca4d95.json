{"ast":null,"code":"import { ChainId, Token, WETH, Fetcher, Route } from '@uniswap/sdk';\nconst USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6);\nconst TAC = new Token(ChainId.MAINNET, '0xDeeB6091A5ADc78fA0332BEE5A38a8908b6b566e', 18);\nconst UniswapService = {};\n\nUniswapService.USDCWETHPair = async () => {\n  const USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId]);\n  const routeTAC = new Route([TACWETHPair], WETH[TAC.chainId]);\n  return routeTAC.midPrice.toSignificant(6);\n};\n\nUniswapService.TACWETHPair = async () => {\n  const TACWETHPair = await Fetcher.fetchPairData(TAC, WETH[TAC.chainId]);\n  const routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId]);\n  return routeUSDC.midPrice.toSignificant(6);\n};\n\nexport default UniswapService;","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/UniswapService.js"],"names":["ChainId","Token","WETH","Fetcher","Route","USDC","MAINNET","TAC","UniswapService","USDCWETHPair","fetchPairData","chainId","routeTAC","TACWETHPair","midPrice","toSignificant","routeUSDC"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,KAAxC,QAAqD,cAArD;AAEA,MAAMC,IAAI,GAAG,IAAIJ,KAAJ,CAAUD,OAAO,CAACM,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,CAAb;AACA,MAAMC,GAAG,GAAG,IAAIN,KAAJ,CAAUD,OAAO,CAACM,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,CAAZ;AAEA,MAAME,cAAc,GAAG,EAAvB;;AAEAA,cAAc,CAACC,YAAf,GAA8B,YAAY;AACzC,QAAMA,YAAY,GAAG,MAAMN,OAAO,CAACO,aAAR,CAAsBL,IAAtB,EAA4BH,IAAI,CAACG,IAAI,CAACM,OAAN,CAAhC,CAA3B;AACA,QAAMC,QAAQ,GAAG,IAAIR,KAAJ,CAAU,CAACS,WAAD,CAAV,EAAyBX,IAAI,CAACK,GAAG,CAACI,OAAL,CAA7B,CAAjB;AACG,SAAOC,QAAQ,CAACE,QAAT,CAAkBC,aAAlB,CAAgC,CAAhC,CAAP;AACH,CAJD;;AAOAP,cAAc,CAACK,WAAf,GAA6B,YAAY;AACrC,QAAMA,WAAW,GAAE,MAAMV,OAAO,CAACO,aAAR,CAAsBH,GAAtB,EAA2BL,IAAI,CAACK,GAAG,CAACI,OAAL,CAA/B,CAAzB;AACF,QAAMK,SAAS,GAAG,IAAIZ,KAAJ,CAAU,CAACK,YAAD,CAAV,EAA0BP,IAAI,CAACG,IAAI,CAACM,OAAN,CAA9B,CAAlB;AAED,SAAOK,SAAS,CAACF,QAAV,CAAmBC,aAAnB,CAAiC,CAAjC,CAAP;AACA,CALD;;AASA,eAAeP,cAAf","sourcesContent":["import { ChainId, Token, WETH, Fetcher, Route } from '@uniswap/sdk'\n\nconst USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6)\nconst TAC = new Token(ChainId.MAINNET, '0xDeeB6091A5ADc78fA0332BEE5A38a8908b6b566e', 18)\n\nconst UniswapService = {}\n\nUniswapService.USDCWETHPair = async () => {\n\tconst USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId])\n\tconst routeTAC = new Route([TACWETHPair], WETH[TAC.chainId])\n    return routeTAC.midPrice.toSignificant(6)\n}\n\n\nUniswapService.TACWETHPair = async () => {\n    const TACWETHPair= await Fetcher.fetchPairData(TAC, WETH[TAC.chainId])\n \tconst routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId])\n\t\n\treturn routeUSDC.midPrice.toSignificant(6)\n}   \n\n\n\nexport default UniswapService\n\n \n  \n  \n"]},"metadata":{},"sourceType":"module"}