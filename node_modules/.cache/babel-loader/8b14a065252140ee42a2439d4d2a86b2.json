{"ast":null,"code":"import { ChainId, Token, WETH, Fetcher, Trade, Route, TokenAmount, TradeType } from '@uniswap/sdk';\nconst USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6);\nconst TAC = new Token(ChainId.MAINNET, '0xDeeB6091A5ADc78fA0332BEE5A38a8908b6b566e', 18);\nconst UniswapService = {}; // UniswapService.USDCWETHPair = async () => {\n// \tconst USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId])\n//  \tconst routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId])\n// \treturn routeUSDC.midPrice.toSignificant(6)\n// }\n// UniswapService.TACWETHPair = async () => {\n//     const TACWETHPair= await Fetcher.fetchPairData(TAC, WETH[TAC.chainId])\n// \tconst routeTAC = new Route([TACWETHPair], WETH[TAC.chainId])\n// \tconsole.log(routeTAC.midPrice.toSignificant(6))\n// \t return routeTAC.midPrice.toSignificant(6)\n// }   \n\nUniswapService.USDCWETHPair = async () => {\n  const USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId]);\n  const routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId]);\n  const tradeUSDC = new Trade(routeUSDC, new TokenAmount(WETH[USDC.chainId], '1000000000000000000'), TradeType.EXACT_INPUT);\n  return tradeUSDC.executionPrice.toSignificant(6);\n};\n\nUniswapService.TACWETHPair = async () => {\n  const TACWETHPair = await Fetcher.fetchPairData(TAC, WETH[TAC.chainId]);\n  const routeTAC = new Route([TACWETHPair], WETH[TAC.chainId]);\n  const tradeTAC = new Trade(routeTAC, new TokenAmount(WETH[TAC.chainId], '1000000000000000000'), TradeType.EXACT_INPUT);\n  return tradeTAC.executionPrice.toSignificant(6);\n};\n\nexport default UniswapService;","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/UniswapService.js"],"names":["ChainId","Token","WETH","Fetcher","Trade","Route","TokenAmount","TradeType","USDC","MAINNET","TAC","UniswapService","USDCWETHPair","fetchPairData","chainId","routeUSDC","tradeUSDC","EXACT_INPUT","executionPrice","toSignificant","TACWETHPair","routeTAC","tradeTAC"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwCC,KAAxC,EAA+CC,KAA/C,EAAsDC,WAAtD,EAAmEC,SAAnE,QAAoF,cAApF;AAEA,MAAMC,IAAI,GAAG,IAAIP,KAAJ,CAAUD,OAAO,CAACS,OAAlB,EAA2B,4CAA3B,EAAyE,CAAzE,CAAb;AACA,MAAMC,GAAG,GAAG,IAAIT,KAAJ,CAAUD,OAAO,CAACS,OAAlB,EAA2B,4CAA3B,EAAyE,EAAzE,CAAZ;AAEA,MAAME,cAAc,GAAG,EAAvB,C,CAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;;AAIAA,cAAc,CAACC,YAAf,GAA8B,YAAY;AACzC,QAAMA,YAAY,GAAG,MAAMT,OAAO,CAACU,aAAR,CAAsBL,IAAtB,EAA4BN,IAAI,CAACM,IAAI,CAACM,OAAN,CAAhC,CAA3B;AACC,QAAMC,SAAS,GAAG,IAAIV,KAAJ,CAAU,CAACO,YAAD,CAAV,EAA0BV,IAAI,CAACM,IAAI,CAACM,OAAN,CAA9B,CAAlB;AACD,QAAME,SAAS,GAAG,IAAIZ,KAAJ,CAAUW,SAAV,EAAqB,IAAIT,WAAJ,CAAgBJ,IAAI,CAACM,IAAI,CAACM,OAAN,CAApB,EAAoC,qBAApC,CAArB,EAAiFP,SAAS,CAACU,WAA3F,CAAlB;AAGA,SAAOD,SAAS,CAACE,cAAV,CAAyBC,aAAzB,CAAuC,CAAvC,CAAP;AACA,CAPD;;AAUAR,cAAc,CAACS,WAAf,GAA6B,YAAY;AACrC,QAAMA,WAAW,GAAE,MAAMjB,OAAO,CAACU,aAAR,CAAsBH,GAAtB,EAA2BR,IAAI,CAACQ,GAAG,CAACI,OAAL,CAA/B,CAAzB;AACH,QAAMO,QAAQ,GAAG,IAAIhB,KAAJ,CAAU,CAACe,WAAD,CAAV,EAAyBlB,IAAI,CAACQ,GAAG,CAACI,OAAL,CAA7B,CAAjB;AACG,QAAMQ,QAAQ,GAAG,IAAIlB,KAAJ,CAAUiB,QAAV,EAAoB,IAAIf,WAAJ,CAAgBJ,IAAI,CAACQ,GAAG,CAACI,OAAL,CAApB,EAAmC,qBAAnC,CAApB,EAA+EP,SAAS,CAACU,WAAzF,CAAjB;AACH,SAAOK,QAAQ,CAACJ,cAAT,CAAwBC,aAAxB,CAAsC,CAAtC,CAAP;AAEA,CAND;;AAaA,eAAeR,cAAf","sourcesContent":["import { ChainId, Token, WETH, Fetcher, Trade, Route, TokenAmount, TradeType } from '@uniswap/sdk'\n\nconst USDC = new Token(ChainId.MAINNET, '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48', 6)\nconst TAC = new Token(ChainId.MAINNET, '0xDeeB6091A5ADc78fA0332BEE5A38a8908b6b566e', 18)\n\nconst UniswapService = {}\n\n// UniswapService.USDCWETHPair = async () => {\n// \tconst USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId])\n//  \tconst routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId])\n// \treturn routeUSDC.midPrice.toSignificant(6)\n// }\n\n\n// UniswapService.TACWETHPair = async () => {\n//     const TACWETHPair= await Fetcher.fetchPairData(TAC, WETH[TAC.chainId])\n// \tconst routeTAC = new Route([TACWETHPair], WETH[TAC.chainId])\n// \tconsole.log(routeTAC.midPrice.toSignificant(6))\n// \t return routeTAC.midPrice.toSignificant(6)\n\n// }   \n\n\n\nUniswapService.USDCWETHPair = async () => {\n\tconst USDCWETHPair = await Fetcher.fetchPairData(USDC, WETH[USDC.chainId])\n \tconst routeUSDC = new Route([USDCWETHPair], WETH[USDC.chainId])\n\tconst tradeUSDC = new Trade(routeUSDC, new TokenAmount(WETH[USDC.chainId], '1000000000000000000'), TradeType.EXACT_INPUT)\n\t\n\t\n\treturn tradeUSDC.executionPrice.toSignificant(6)\n}\n\n\nUniswapService.TACWETHPair = async () => {\n    const TACWETHPair= await Fetcher.fetchPairData(TAC, WETH[TAC.chainId])\n\tconst routeTAC = new Route([TACWETHPair], WETH[TAC.chainId])\n    const tradeTAC = new Trade(routeTAC, new TokenAmount(WETH[TAC.chainId], '1000000000000000000'), TradeType.EXACT_INPUT)\t\n return tradeTAC.executionPrice.toSignificant(6)\n\n}   \n\n\n\n\n\n\nexport default UniswapService\n\n \n  \n  \n"]},"metadata":{},"sourceType":"module"}