{"ast":null,"code":"import Portis from '@portis/web3';\nimport Web3 from 'web3'; //import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\n\nimport { TACVotingABI, TACVotingAddress, CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress } from './AddAndABISrc_testnet';\nimport FirebaseService from 'services/FirebaseService';\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\nexport { TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress }; // export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\nexport const CoopDataContractService = (walletType, method, props) => {\n  let web3;\n\n  switch (walletType) {\n    case 'Portis':\n      web3 = new Web3(portis.provider);\n      break;\n\n    case 'MetaMask':\n      web3 = new Web3(window.ethereum);\n  }\n\n  if (web3) {\n    const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n\n    const trySwitch = async (method, props) => {\n      switch (method) {\n        case 'proposeMatch':\n          break;\n\n        case 'getUser':\n          const {\n            address\n          } = props;\n          return await coopData_contract.methods.getUser(address).call().then(res => res);\n          break;\n      }\n    };\n\n    return trySwitch(method, props);\n  }\n}; // const CoopDataContract = {}\n// CoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n// \t console.log('hello proposeMatch')\n// \t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n// \t\t\t\t\t\t  .send({ from: refereeAddress })\n// \t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\tconsole.log(txHash)\n// \t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n// \t\t\t\t\t\t  })\n// \t\t\t\t\t\t  .on('error', function(error){\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t  })\n// }\n// CoopDataContract.getUserMatches = async (address) =>\n// \t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n// CoopDataContract.getProposedMatchData = async (proposedMatchId) => \n//          await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n// CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n// CoopDataContract.setUser = async (address) =>\n// \t\t\tawait coopData_contract.methods\n// \t\t\t\t\t  .setUser()\n//        \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n// \t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n// \t\t\t\t\t\t console.log(\"pending\");\n// \t\t\t\t\t\t console.log(hash)\n// \t\t\t\t\t  })\n// \t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n// \t\t\t\t\t\t console.log(\"confirmation\");\n// \t\t\t\t\t\t console.log(receipt)\n// \t\t\t\t\t  });\n// CoopDataContract.getUser = async (address) =>\n// \t\tawait coopData_contract.methods\n// \t\t\t\t.getUser(address)\n// \t\t\t\t.call().then(res => res);\n//export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n\n_c = CoopDataContractService;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoopDataContractService\");","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/AddAndABI1.js"],"names":["Portis","Web3","TACVotingABI","TACVotingAddress","CoopDataABI","CoopDataAddress","TACLockupABI","TACLockupAddress","TACABI","TACAddress","FirebaseService","portis","CoopDataContractService","walletType","method","props","web3","provider","window","ethereum","coopData_contract","eth","Contract","trySwitch","address","methods","getUser","call","then","res"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;AACA;;AACA,SAASC,YAAT,EAAuBC,gBAAvB,EAAwCC,WAAxC,EAAqDC,eAArD,EAAsEC,YAAtE,EAAoFC,gBAApF,EAAsGC,MAAtG,EAA8GC,UAA9G,QAA+H,wBAA/H;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,MAAMC,MAAM,GAAG,IAAIX,MAAJ,CAAW,sCAAX,EAAmD,SAAnD,CAAf;AAGA,SAAQS,UAAR,EAAoBJ,eAApB,EAAqCE,gBAArC,EAAuDJ,gBAAvD,G,CAEA;AACA;AACA;AACA;;AAOA,OAAO,MAAMS,uBAAuB,GAAG,CAACC,UAAD,EAAaC,MAAb,EAAqBC,KAArB,KAA+B;AAErE,MAAIC,IAAJ;;AACA,UAAQH,UAAR;AACC,SAAK,QAAL;AAAgBG,MAAAA,IAAI,GAAG,IAAIf,IAAJ,CAASU,MAAM,CAACM,QAAhB,CAAP;AACf;;AACD,SAAK,UAAL;AAAiBD,MAAAA,IAAI,GAAG,IAAIf,IAAJ,CAASiB,MAAM,CAACC,QAAhB,CAAP;AAHlB;;AAMA,MAAGH,IAAH,EAAQ;AAER,UAAMI,iBAAiB,GAAI,IAAIJ,IAAI,CAACK,GAAL,CAASC,QAAb,CAAsBlB,WAAtB,EAAmCC,eAAnC,CAA3B;;AACA,UAAMkB,SAAS,GAAG,OAAOT,MAAP,EAAeC,KAAf,KAAyB;AACzC,cAAOD,MAAP;AACA,aAAK,cAAL;AAEC;;AACD,aAAK,SAAL;AACE,gBAAM;AAACU,YAAAA;AAAD,cAAYT,KAAlB;AACA,iBAAQ,MAAMK,iBAAiB,CAACK,OAAlB,CACZC,OADY,CACJF,OADI,EAEZG,IAFY,GAELC,IAFK,CAEAC,GAAG,IAAIA,GAFP,CAAd;AAID;AAVD;AAYE,KAbJ;;AAeA,WAAON,SAAS,CAACT,MAAD,EAASC,KAAT,CAAhB;AAEC;AAGD,CAhCM,C,CAkCP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;KAvFaH,uB","sourcesContent":["import Portis from '@portis/web3';\nimport Web3 from 'web3'\n//import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\nimport { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc_testnet'; \nimport FirebaseService from 'services/FirebaseService'\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\n\n\nexport {TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress}\n\n// export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\n\n\t\n\n\t\n\nexport const CoopDataContractService = (walletType, method, props) => {\n\t\n\tlet web3\n\tswitch (walletType){\n\t\tcase 'Portis' : web3 = new Web3(portis.provider);\n\t\t\tbreak;\n\t\tcase 'MetaMask': web3 = new Web3(window.ethereum);\t\n\t}\n\t\n\tif(web3){\n\t\n\tconst coopData_contract =  new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n\tconst trySwitch = async (method, props) => {\n\t\t\tswitch(method){\n\t\t\tcase 'proposeMatch' :  \t\n\n\t\t\t\tbreak;\n\t\t\tcase 'getUser' : \n\t\t\t\t\tconst {address} = props\n\t\t\t\t\treturn  await coopData_contract.methods\n\t\t\t\t\t\t.getUser(address)\n\t\t\t\t\t\t.call().then(res => res);   \n\n\t\t\t\tbreak;\t\t\n\t\t\t}\t\n    }\n\t\n\treturn trySwitch(method, props)\n\t\t\n\t}\n\t\n\n}\n\n// const CoopDataContract = {}\n\n\n// CoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n// \t console.log('hello proposeMatch')\n// \t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n// \t\t\t\t\t\t  .send({ from: refereeAddress })\n// \t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\tconsole.log(txHash)\n// \t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n// \t\t\t\t\t\t  })\n// \t\t\t\t\t\t  .on('error', function(error){\n// \t\t\t\t\t\t\tconsole.log(error)\n// \t\t\t\t\t\t  })\n\t\n// }\n\n// CoopDataContract.getUserMatches = async (address) =>\n// \t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n\n// CoopDataContract.getProposedMatchData = async (proposedMatchId) => \n//          await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n\n// CoopDataContract.approveProposedMatchData = async (address) =>\n//            await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n// \t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n// \t\t\t\t\t\t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n// \t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n// \t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n// \t\t\t\t\t\t\t\t\t\t\t\t  })\n\n// CoopDataContract.setUser = async (address) =>\n// \t\t\tawait coopData_contract.methods\n// \t\t\t\t\t  .setUser()\n//        \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n// \t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n// \t\t\t\t\t\t console.log(\"pending\");\n// \t\t\t\t\t\t console.log(hash)\n// \t\t\t\t\t  })\n// \t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n// \t\t\t\t\t\t console.log(\"confirmation\");\n// \t\t\t\t\t\t console.log(receipt)\n// \t\t\t\t\t  });\n\n// CoopDataContract.getUser = async (address) =>\n// \t\tawait coopData_contract.methods\n// \t\t\t\t.getUser(address)\n// \t\t\t\t.call().then(res => res);\n\n\n//export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n"]},"metadata":{},"sourceType":"module"}