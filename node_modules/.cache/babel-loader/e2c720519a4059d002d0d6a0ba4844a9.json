{"ast":null,"code":"import { all, takeEvery, put, fork, call } from 'redux-saga/effects';\nimport { GET_TAC_WETH_PAIR, UPDATE_TAC_WETH_PAIR, GET_WALLET_BALANCE, UPDATE_WALLET_BALANCE } from '../constants/Uniswap';\nimport { getTacWethPair, updateTacWethPair, getWalletBalance, updateWalletBalance } from \"../actions/Uniswap\";\nimport UniswapService from 'services/UniswapService';\nimport { getTacBalance, getEtherBalance } from 'services/EtherScanService';\nexport function* getTacWethPairSaga() {\n  yield takeEvery(GET_TAC_WETH_PAIR, function* ({\n    address\n  }) {\n    try {\n      const TACWETHPair = yield call(UniswapService.TACWETHPair);\n      const USDCWETHPair = yield call(UniswapService.USDCWETHPair);\n      const USDCTACpair = (USDCWETHPair / TACWETHPair).toFixed(2);\n      const tacBalance = yield call(getTacBalance, address);\n      const etherBalance = yield call(getEtherBalance, address);\n      yield put(updateTacWethPair({\n        USDCTACpair,\n        USDCWETHPair,\n        TACWETHPair,\n        tacBalance,\n        etherBalance\n      }));\n    } catch (err) {}\n  });\n}\nexport function* getWalletBalanceSaga() {\n  yield takeEvery(GET_WALLET_BALANCE, function* ({\n    address\n  }) {\n    console.log('hihih', address);\n\n    try {\n      const tacBalance = yield call(getTacBalance, address);\n      const etherBalance = yield call(getEtherBalance, address);\n      yield put(updateWalletBalance({\n        tacBalance,\n        etherBalance\n      }));\n    } catch (err) {}\n  });\n}\nexport default function* rootSaga() {\n  yield all([fork(getTacWethPairSaga), fork(getWalletBalanceSaga)]);\n}","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/redux/sagas/Uniswap.js"],"names":["all","takeEvery","put","fork","call","GET_TAC_WETH_PAIR","UPDATE_TAC_WETH_PAIR","GET_WALLET_BALANCE","UPDATE_WALLET_BALANCE","getTacWethPair","updateTacWethPair","getWalletBalance","updateWalletBalance","UniswapService","getTacBalance","getEtherBalance","getTacWethPairSaga","address","TACWETHPair","USDCWETHPair","USDCTACpair","toFixed","tacBalance","etherBalance","err","getWalletBalanceSaga","console","log","rootSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,SAAd,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,IAApC,QAAgD,oBAAhD;AACA,SACCC,iBADD,EAECC,oBAFD,EAGCC,kBAHD,EAICC,qBAJD,QAKO,sBALP;AAMA,SACCC,cADD,EAECC,iBAFD,EAGCC,gBAHD,EAICC,mBAJD,QAKO,oBALP;AAOA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAQC,aAAR,EAAuBC,eAAvB,QAA6C,2BAA7C;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMf,SAAS,CAACI,iBAAD,EAAoB,WAAW;AAACY,IAAAA;AAAD,GAAX,EAAsB;AACzD,QAAI;AACH,YAAMC,WAAW,GAAE,MAAMd,IAAI,CAACS,cAAc,CAACK,WAAhB,CAA7B;AACA,YAAMC,YAAY,GAAE,MAAMf,IAAI,CAACS,cAAc,CAACM,YAAhB,CAA9B;AACA,YAAMC,WAAW,GAAG,CAACD,YAAY,GAACD,WAAd,EAA2BG,OAA3B,CAAmC,CAAnC,CAApB;AACA,YAAMC,UAAU,GAAG,MAAMlB,IAAI,CAACU,aAAD,EAAgBG,OAAhB,CAA7B;AACA,YAAMM,YAAY,GAAG,MAAMnB,IAAI,CAACW,eAAD,EAAkBE,OAAlB,CAA/B;AAEA,YAAMf,GAAG,CAACQ,iBAAiB,CAAC;AAACU,QAAAA,WAAD;AAAcD,QAAAA,YAAd;AAA4BD,QAAAA,WAA5B;AAAyCI,QAAAA,UAAzC;AAAqDC,QAAAA;AAArD,OAAD,CAAlB,CAAT;AAEA,KATD,CASE,OAAOC,GAAP,EAAY,CACb;AACD,GAZe,CAAf;AAaD;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACtC,QAAMxB,SAAS,CAACM,kBAAD,EAAqB,WAAW;AAACU,IAAAA;AAAD,GAAX,EAAsB;AACzDS,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,OAArB;;AACD,QAAI;AACH,YAAMK,UAAU,GAAG,MAAMlB,IAAI,CAACU,aAAD,EAAgBG,OAAhB,CAA7B;AACA,YAAMM,YAAY,GAAG,MAAMnB,IAAI,CAACW,eAAD,EAAkBE,OAAlB,CAA/B;AACA,YAAMf,GAAG,CAACU,mBAAmB,CAAC;AAACU,QAAAA,UAAD;AAAaC,QAAAA;AAAb,OAAD,CAApB,CAAT;AAEA,KALD,CAKE,OAAOC,GAAP,EAAY,CACb;AACD,GATe,CAAf;AAUD;AAID,eAAe,UAAUI,QAAV,GAAqB;AAClC,QAAM5B,GAAG,CAAC,CACVG,IAAI,CAACa,kBAAD,CADM,EAETb,IAAI,CAACsB,oBAAD,CAFK,CAAD,CAAT;AAKD","sourcesContent":["import { all, takeEvery, put, fork, call } from 'redux-saga/effects';\nimport {\n\tGET_TAC_WETH_PAIR,\n\tUPDATE_TAC_WETH_PAIR,\n\tGET_WALLET_BALANCE,\n\tUPDATE_WALLET_BALANCE\n} from '../constants/Uniswap';\nimport {\n\tgetTacWethPair,\n\tupdateTacWethPair,\n\tgetWalletBalance,\n\tupdateWalletBalance\n} from \"../actions/Uniswap\";\n\nimport UniswapService from 'services/UniswapService'\nimport {getTacBalance, getEtherBalance} from 'services/EtherScanService'\n\nexport function* getTacWethPairSaga() {\n  yield takeEvery(GET_TAC_WETH_PAIR, function* ({address}) {\n\t\ttry {\n\t\t\tconst TACWETHPair= yield call(UniswapService.TACWETHPair)\n\t\t\tconst USDCWETHPair= yield call(UniswapService.USDCWETHPair)\n\t\t\tconst USDCTACpair = (USDCWETHPair/TACWETHPair).toFixed(2)\n\t\t\tconst tacBalance = yield call(getTacBalance, address)\n\t\t\tconst etherBalance = yield call(getEtherBalance, address)\n\n\t\t\tyield put(updateTacWethPair({USDCTACpair, USDCWETHPair, TACWETHPair, tacBalance, etherBalance}));\n\n\t\t} catch (err) {\n\t\t}\n\t});\n}\n\nexport function* getWalletBalanceSaga() {\n  yield takeEvery(GET_WALLET_BALANCE, function* ({address}) {\n\t  console.log('hihih', address)\n\t\ttry {\n\t\t\tconst tacBalance = yield call(getTacBalance, address)\n\t\t\tconst etherBalance = yield call(getEtherBalance, address)\n\t\t\tyield put(updateWalletBalance({tacBalance, etherBalance}));\n\n\t\t} catch (err) {\n\t\t}\n\t});\n}\n\n\n\nexport default function* rootSaga() {\n  yield all([\n\t\tfork(getTacWethPairSaga),\n\t  fork(getWalletBalanceSaga),\n\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}