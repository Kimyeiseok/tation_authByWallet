{"ast":null,"code":"import Portis from '@portis/web3';\nimport Web3 from 'web3'; //import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\n\nimport { TACVotingABI, TACVotingAddress, CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress } from './AddAndABISrc_testnet';\nimport FirebaseService from 'services/FirebaseService';\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\nexport { TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress }; // export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\nconst CoopDataContract = {};\n\nCoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n  console.log('hello proposeMatch');\n  await coopData_contract.methods.proposeMatch(winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress, 'values.notes').send({\n    from: refereeAddress\n  }).on(\"transactionHash\", function (txHash) {\n    console.log(txHash);\n    FirebaseService.refereeTxHash(refereeAddress, txHash);\n  }).on('error', function (error) {\n    console.log(error);\n  });\n};\n\nCoopDataContract.getUserMatches = async (address) => await coopData_contract.methods.getUserMatches(address).call().then(res => res);\n\nCoopDataContract.getProposedMatchData = async (proposedMatchId) => await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n\nCoopDataContract.approveProposedMatchData = async (address) => await coopData_contract.methods.setUser().send({\n  from: address,\n  gas: '0x0CD4C'\n}).on(\"error\", function (error) {\n  console.log(error);\n}).on(\"transactionHash\", function (txHash) {\n  console.log('Register User: transactionHash');\n  console.log(txHash);\n  return txHash;\n});\n\nCoopDataContract.setUser = async (address) => await coopData_contract.methods.setUser().send({\n  from: address,\n  gas: '0x1CD4C'\n}).on(\"transactionHash\", function (hash) {\n  console.log(\"pending\");\n  console.log(hash);\n}).on(\"confirmation\", function (receipt) {\n  console.log(\"confirmation\");\n  console.log(receipt);\n});\n\nCoopDataContract.getUser = async (address) => await coopData_contract.methods.getUser(address).call().then(res => res);\n\nexport const CoopDataContractService = (walletType, method, props) => {\n  let web3;\n\n  switch (walletType) {\n    case 'Portis':\n      web3 = new Web3(portis.provider);\n      break;\n\n    case 'MetaMask':\n      web3 = new Web3(window.ethereum);\n  }\n\n  if (web3) {\n    const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n\n    const trySwitch = async (method, props) => {\n      switch (method) {\n        case 'proposeMatch':\n          break;\n\n        case 'getUser':\n          const {\n            address\n          } = props; // return await coopData_contract.methods\n          // .getUser(address)\n          // .call().then(res => res);   \n\n          return CoopDataContract.getUser(address);\n          break;\n      }\n    };\n\n    return trySwitch(method, props);\n  }\n}; //export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n\n_c = CoopDataContractService;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoopDataContractService\");","map":{"version":3,"sources":["/workspace/tation_authByWallet/src/services/AddAndABI1.js"],"names":["Portis","Web3","TACVotingABI","TACVotingAddress","CoopDataABI","CoopDataAddress","TACLockupABI","TACLockupAddress","TACABI","TACAddress","FirebaseService","portis","CoopDataContract","proposeMatch","winnerAddress","winnerPoints","loserAddress","loserPoints","refereeAddress","console","log","coopData_contract","methods","send","from","on","txHash","refereeTxHash","error","getUserMatches","address","call","then","res","getProposedMatchData","proposedMatchId","getProposedMatch","approveProposedMatchData","setUser","gas","hash","receipt","getUser","CoopDataContractService","walletType","method","props","web3","provider","window","ethereum","eth","Contract","trySwitch"],"mappings":"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","sourcesContent":["import Portis from '@portis/web3';\nimport Web3 from 'web3'\n//import { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc';\n//const portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'mainnet');\nimport { TACVotingABI, TACVotingAddress,CoopDataABI, CoopDataAddress, TACLockupABI, TACLockupAddress, TACABI, TACAddress} from './AddAndABISrc_testnet'; \nimport FirebaseService from 'services/FirebaseService'\nconst portis = new Portis('0fccffb3-5cff-4c61-8cca-59ee4e9e9894', 'rinkeby');\n\n\nexport {TACAddress, CoopDataAddress, TACLockupAddress, TACVotingAddress}\n\n// export const tacVoting_contract = new web3.eth.Contract(TACVotingABI, TACVotingAddress);\n// export const coopData_contract = new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n// export const tacLockup_contract = new web3.eth.Contract(TACLockupABI, TACLockupAddress);\n// export const tac_contract = new web3.eth.Contract(TACABI, TACAddress);\n\n\n\t\nconst CoopDataContract = {}\n\n\nCoopDataContract.proposeMatch = async (winnerAddress, winnerPoints, loserAddress, loserPoints, refereeAddress) => {\n\t console.log('hello proposeMatch')\n\t await coopData_contract.methods.proposeMatch(winnerAddress,winnerPoints,loserAddress,loserPoints,refereeAddress,'values.notes' )\n\t\t\t\t\t\t  .send({ from: refereeAddress })\n\t\t\t\t\t\t  .on(\"transactionHash\", function(txHash) {\n\t\t\t\t\t\t\tconsole.log(txHash)\n\t\t\t\t\t\t\tFirebaseService.refereeTxHash(refereeAddress, txHash)\n\t\t\t\t\t\t  })\n\t\t\t\t\t\t  .on('error', function(error){\n\t\t\t\t\t\t\tconsole.log(error)\n\t\t\t\t\t\t  })\n\t\n}\n\nCoopDataContract.getUserMatches = async (address) =>\n\t\t\tawait coopData_contract.methods.getUserMatches(address).call().then(res => res)\n\nCoopDataContract.getProposedMatchData = async (proposedMatchId) => \n         await coopData_contract.methods.getProposedMatch(proposedMatchId).call().then(res => res);\n\nCoopDataContract.approveProposedMatchData = async (address) =>\n           await coopData_contract.methods.setUser().send({ from: address, gas: '0x0CD4C'})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"error\", function(error){\n\t\t\t\t\t\t\t\t\t\t\t\t\t  console.log(error)\n\t\t\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t.on(\"transactionHash\", function(txHash) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t   console.log('Register User: transactionHash')\n\t\t\t\t\t\t\t\t\t\t\t\t\t   console.log(txHash)\n\t  \t\t\t\t\t\t\t\t\t\t\t\t   return txHash\n\t\t\t\t\t\t\t\t\t\t\t\t  })\n\nCoopDataContract.setUser = async (address) =>\n\t\t\tawait coopData_contract.methods\n\t\t\t\t\t  .setUser()\n       \t\t\t\t     .send({ from: address, gas: '0x1CD4C'})\n\t\t\t\t\t  .on(\"transactionHash\", function(hash) {\n\t\t\t\t\t\t console.log(\"pending\");\n\t\t\t\t\t\t console.log(hash)\n\t\t\t\t\t  })\n\t\t\t\t\t  .on(\"confirmation\", function(receipt) {\n\t\t\t\t\t\t console.log(\"confirmation\");\n\t\t\t\t\t\t console.log(receipt)\n\t\t\t\t\t  });\n\nCoopDataContract.getUser = async (address) =>\n\t\tawait coopData_contract.methods\n\t\t\t\t.getUser(address)\n\t\t\t\t.call().then(res => res);\n\t\n\nexport const CoopDataContractService = (walletType, method, props) => {\n\t\n\tlet web3\n\tswitch (walletType){\n\t\tcase 'Portis' : web3 = new Web3(portis.provider);\n\t\t\tbreak;\n\t\tcase 'MetaMask': web3 = new Web3(window.ethereum);\t\n\t}\n\t\n\tif(web3){\n\t\n\tconst coopData_contract =  new web3.eth.Contract(CoopDataABI, CoopDataAddress);\n\tconst trySwitch = async (method, props) => {\n\t\t\tswitch(method){\n\t\t\tcase 'proposeMatch' :  \t\n\n\t\t\t\tbreak;\n\t\t\tcase 'getUser' : \n\t\t\t\t\tconst {address} = props\n\t\t\t\t\t// return await coopData_contract.methods\n\t\t\t\t\t// .getUser(address)\n\t\t\t\t\t// .call().then(res => res);   \n\t\t\t\t\treturn CoopDataContract.getUser(address)\n\t\t\t\tbreak;\t\t\n\t\t\t}\t\n    }\n\t\n\treturn trySwitch(method, props)\n\t\t\n\t}\n\t\n\n}\n\n\n\n\n//export const tac_contract_approve = async (address) =>\tawait tac_contract.methods.allowance(address, CoopDataAddress).call().then(res => res)\n"]},"metadata":{},"sourceType":"module"}